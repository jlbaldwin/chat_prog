"""
PROG DESC:  Server for a chat program. Server starts on a port recevied from the
            command line. Server waits for contact then begins chat session. If 
            server or client quit the session with "\quit" command, the server 
            will go back to waiting for another connection. 
            Messages are limited to 500 characters and will be truncated if longer.
            SIGINT to close server.
            To run: python3 chatserve <port#> 
CITATION:   This code is influenced by:
            www.geeksforgeeks.org/simple-chat-room-using-python 
"""


import sys
from socket import *

MAXDATASIZE = 500    #max message per specs
MAXMSGSIZE = 511     #extra space to account for handle and >   

#hard coded server name to prepend to sent messages 
serverHandle = "Server>"

#get server port# from command line
serverPort = int(sys.argv[1]) 

#create TCP socket and bind the port num to this socket, wait for contact
serverSocket = socket(AF_INET, SOCK_STREAM)
serverSocket.bind(('', serverPort))

#first chat loop listens for contact, then creates socket via accept() 
while True:
  
   #wait for contact 
   serverSocket.listen(1)
   print('Server is running and ready to receive from Host B.')

   #create new socket and save client address to addr
   connectionSocket, addr = serverSocket.accept()

   #chat loop for each connection
   while True: 

      #receive message from client
      msgIn = connectionSocket.recv(MAXMSGSIZE).decode()
      
      #close socket if quit received, break to first loop to listen 
      if msgIn == "\quit":
         connectionSocket.close()
         break

      #client has not quit so print message and continue 
      print(msgIn)

      #display handle and get message from server to send
      msgOut = input(serverHandle)

      #if server quits, send quit message, then break to first loop and listen
      if msgOut == "\quit":
         connectionSocket.send(msgOut.encode())
         connectionSocket.close()   
         break

      #build send message with prepended handle, then send
      msgOut = serverHandle + msgOut 
      connectionSocket.send(msgOut.encode())
      


